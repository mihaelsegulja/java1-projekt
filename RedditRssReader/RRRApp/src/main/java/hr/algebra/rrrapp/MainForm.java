/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra.rrrapp;

import hr.algebra.dao.model.User;
import hr.algebra.dao.model.UserRole;
import hr.algebra.rrrapp.view.Authentication;
import hr.algebra.rrrapp.view.DragNDrop;
import hr.algebra.rrrapp.view.EditAuthor;
import hr.algebra.rrrapp.view.EditComment;
import hr.algebra.rrrapp.view.EditPost;
import hr.algebra.rrrapp.view.Settings;
import hr.algebra.rrrapp.view.UploadContent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author miki
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        initTabs();
        initMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpMain = new javax.swing.JTabbedPane();
        mbMain = new javax.swing.JMenuBar();
        menuApp = new javax.swing.JMenu();
        miQuit = new javax.swing.JMenuItem();
        miLogout = new javax.swing.JMenuItem();
        menuInfo = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuApp.setText("App");

        miQuit.setText("Quit");
        menuApp.add(miQuit);

        miLogout.setText("Logout");
        menuApp.add(miLogout);

        mbMain.add(menuApp);

        menuInfo.setText("Info");

        miAbout.setText("About");
        menuInfo.add(miAbout);

        mbMain.add(menuInfo);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpMain, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tpMain, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Theme */
        com.formdev.flatlaf.intellijthemes.FlatSolarizedLightIJTheme.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenu menuApp;
    private javax.swing.JMenu menuInfo;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JTabbedPane tpMain;
    // End of variables declaration//GEN-END:variables

    private Authentication authPanel;
    private UploadContent uploadPanel;
    private Settings settingsPanel;
    private EditPost editPost;
    private EditAuthor editAuthor;
    private EditComment editComment;
    private DragNDrop dragNDrop;
    
    private void initTabs() {
        authPanel = new Authentication();
        uploadPanel = new UploadContent();
        settingsPanel = new Settings();
        editPost = new EditPost();
        editAuthor = new EditAuthor();
        editComment = new EditComment();
        dragNDrop = new DragNDrop();
        
        authPanel.setOnLoginSuccess(user -> { 
            showTabsForUser(user);
            tpMain.remove(authPanel);
        });

        tpMain.add("Authenticate", authPanel);
    }

    private void showTabsForUser(User user) {
        tpMain.add("Drag N Drop", dragNDrop);
        
        if (user.getUserRoleId() == UserRole.ADMIN.getUserRole()) {
            tpMain.add("Upload", uploadPanel);
            tpMain.add("Edit Posts", editPost);
            tpMain.add("Edit Authors", editAuthor);
            tpMain.add("Edit Comments", editComment);
            tpMain.add("Settings", settingsPanel);
        }
    }

    private void initMenu() {
        miQuit.addActionListener(e -> System.exit(0));
        miAbout.addActionListener(e -> JOptionPane.showMessageDialog(
            this,
            "Reddit RSS Reader\nAuthor: Mihael Å egulja\nVersion: 1.0",
            "About",
            JOptionPane.INFORMATION_MESSAGE
        ));
        miLogout.addActionListener(e -> logout());
        
        miQuit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_DOWN_MASK));
        miAbout.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK));
        miLogout.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.CTRL_DOWN_MASK));
    }

    private void logout() {
        tpMain.removeAll();
        
        authPanel.setOnLoginSuccess(user -> { 
            showTabsForUser(user);
            tpMain.remove(authPanel);
        });

        tpMain.add("Authenticate", authPanel);
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.rrrapp.view;

import hr.algebra.dao.PostRepository;
import hr.algebra.dao.RepositoryFactory;
import hr.algebra.dao.model.Post;
import hr.algebra.rrrapp.view.model.PostTransferable;
import java.awt.datatransfer.Transferable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.TransferHandler;
import org.jsoup.Jsoup;
import org.jsoup.safety.Safelist;

/**
 *
 * @author miki
 */
public class DragNDrop extends javax.swing.JPanel {
    
    private PostRepository postRepo;
    
    /**
     * Creates new form DragNDrop
     */
    public DragNDrop() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsPosts = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tpContent = new javax.swing.JTextPane();

        setPreferredSize(new java.awt.Dimension(900, 600));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsPosts);

        tpContent.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setViewportView(tpContent);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Post> lsPosts;
    private javax.swing.JTextPane tpContent;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepo();
            loadPosts();
            initDnd();
        } catch (Exception ex) {
            Logger.getLogger(DragNDrop.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void initRepo() {
        postRepo = RepositoryFactory.getPostRepo();
    }

    private void initDnd() {
        lsPosts.setDragEnabled(true);
        lsPosts.setTransferHandler(new TransferHandler() {
            @Override
            protected Transferable createTransferable(JComponent c) {
                Post post = lsPosts.getSelectedValue();
                return new PostTransferable(post);
            }

            @Override
            public int getSourceActions(JComponent c) {
                return COPY;
            }
        });
        
        tpContent.setTransferHandler(new TransferHandler() {
            @Override
            public boolean canImport(TransferSupport support) {
                return support.isDataFlavorSupported(PostTransferable.POST_FLAVOR);
            }

            @Override
            public boolean importData(TransferSupport support) {
                try {
                    Post post = (Post) support.getTransferable().getTransferData(PostTransferable.POST_FLAVOR);

                    tpContent.setContentType("text/html");
                    tpContent.setText(Jsoup.clean(post.getContent(), Safelist.relaxed()));
                    return true;
                } catch (Exception e) {
                    Logger.getLogger(DragNDrop.class.getName()).log(Level.SEVERE, null, e);
                    return false;
                }
            }
        });
    }

    private void loadPosts() throws Exception {
        List<Post> posts = postRepo.selectPosts();
        DefaultListModel<Post> model = new DefaultListModel<>();
        posts.forEach(model::addElement);
        lsPosts.setCellRenderer((list, value, index, isSelected, cellHasFocus) -> {
            Post post = (Post)value;
            String displayText = String.format("%s | %s | by %s", post.getTitle(), post.getSubredditName(), post.getAuthor().getName());
            JLabel label = new JLabel(displayText);

            if (isSelected) {
                label.setOpaque(true);
                label.setBackground(list.getSelectionBackground());
                label.setForeground(list.getSelectionForeground());
            } else {
                label.setOpaque(true);
                label.setBackground(list.getBackground());
                label.setForeground(list.getForeground());
            }

            return label;
        });
        lsPosts.setModel(model);
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.rrrapp.view;

import hr.algebra.dao.Repository;
import hr.algebra.dao.RepositoryFactory;
import hr.algebra.dao.model.Comment;
import hr.algebra.dao.model.Post;
import hr.algebra.rrrapp.parser.model.Entry;
import hr.algebra.rrrapp.parser.model.EntryMapper;
import hr.algebra.rrrapp.parser.rss.RedditParser;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.utilities.RedditUrlUtils;
import hr.algebra.utilities.RedditUrlUtils.RedditUrlType;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author miki
 */
public class UploadContent extends javax.swing.JPanel {

    /**
     * Creates new form UploadContent
     */
    public UploadContent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsContent = new javax.swing.JList<>();
        btnUploadContent = new javax.swing.JButton();
        lbRedditRssUrl = new javax.swing.JLabel();
        lbRedditRssUrlError = new javax.swing.JLabel();
        tfRedditRssUrl = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(800, 600));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsContent);

        btnUploadContent.setText("Upload content");
        btnUploadContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadContentActionPerformed(evt);
            }
        });

        lbRedditRssUrl.setText("Reddit RSS URL or subreddit name:");

        lbRedditRssUrlError.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbRedditRssUrlError.setForeground(new java.awt.Color(255, 0, 0));
        lbRedditRssUrlError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnUploadContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lbRedditRssUrl)
                        .addGap(18, 18, 18)
                        .addComponent(tfRedditRssUrl, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbRedditRssUrlError, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbRedditRssUrl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfRedditRssUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbRedditRssUrlError, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUploadContent, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadContentActionPerformed
        try {
            String url = tfRedditRssUrl.getText().trim();

            String normalizedRssUrl = RedditUrlUtils.normalizeRedditRssUrl(url);
            RedditUrlType type = RedditUrlUtils.detectRedditUrlType(normalizedRssUrl);

            List<Entry> entries = RedditParser.parse(normalizedRssUrl);
            
            switch (type) {
                case SUBREDDIT -> {
                    List<Post> posts = EntryMapper.mapToPosts(entries);
                    repo.createPosts(posts);
                    display(new ArrayList<>(posts));
                }
                case POST -> {
//                    Entry firstEntry = entries.get(0);
//                    Post post = new Post(
//                            firstEntry.getId(),
//                            firstEntry.getRedditId(),
//                            firstEntry.getTitle(),
//                            firstEntry.getAuthor(),
//                            firstEntry.getLink(),
//                            firstEntry.getThumbnailLink(),
//                            firstEntry.getContent(),
//                            firstEntry.getPublishedDate(),
//                            firstEntry.getUpdatedDate(),
//                            firstEntry.getSubredditName()
//                    );
//                    repo.createPost(post);
                    entries.remove(0);
                    List<Comment> comments = EntryMapper.mapToComments(entries);
                    repo.createComments(comments);
                    display(new ArrayList<>(comments));
                }
                default -> {
                    MessageUtils.showErrorMessage("Error", "Unsupported link type");
                }
            }
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload content");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUploadContentActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUploadContent;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbRedditRssUrl;
    private javax.swing.JLabel lbRedditRssUrlError;
    private javax.swing.JList<String> lsContent;
    private javax.swing.JTextField tfRedditRssUrl;
    // End of variables declaration//GEN-END:variables

    private Repository repo;
    private DefaultListModel<String> model;
    
    private void init() {
        try {
            repo = RepositoryFactory.getRepository();
            model = new DefaultListModel<>();
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
        }
    }

    private <T> void display(List<T> list) {
        model.clear();
        list.forEach(itm -> model.addElement(itm.toString()));
        lsContent.setModel(model);
    }
}
